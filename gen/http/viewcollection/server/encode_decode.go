// Code generated by goa v3.17.2, DO NOT EDIT.
//
// viewcollection HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/neilogic1911/goaviewcollection/design

package server

import (
	"context"
	"net/http"

	viewcollection "github.com/neilogic1911/goaviewcollection/gen/viewcollection"
	viewcollectionviews "github.com/neilogic1911/goaviewcollection/gen/viewcollection/views"
	goahttp "goa.design/goa/v3/http"
)

// EncodeListElementResponse returns an encoder for responses returned by the
// viewcollection list_element endpoint.
func EncodeListElementResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res := v.(viewcollectionviews.ElementResultCollection)
		enc := encoder(ctx, w)
		body := NewElementResultResponseTinyCollection(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeListElementInAttributeResponse returns an encoder for responses
// returned by the viewcollection list_element_in_attribute endpoint.
func EncodeListElementInAttributeResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*viewcollection.ListElementInAttributeResult)
		enc := encoder(ctx, w)
		body := NewListElementInAttributeResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// marshalViewcollectionviewsElementResultViewToElementResultResponseTiny
// builds a value of type *ElementResultResponseTiny from a value of type
// *viewcollectionviews.ElementResultView.
func marshalViewcollectionviewsElementResultViewToElementResultResponseTiny(v *viewcollectionviews.ElementResultView) *ElementResultResponseTiny {
	res := &ElementResultResponseTiny{
		ID:   *v.ID,
		Name: *v.Name,
	}

	return res
}

// marshalViewcollectionElementResultToElementResultResponseBody builds a value
// of type *ElementResultResponseBody from a value of type
// *viewcollection.ElementResult.
func marshalViewcollectionElementResultToElementResultResponseBody(v *viewcollection.ElementResult) *ElementResultResponseBody {
	if v == nil {
		return nil
	}
	res := &ElementResultResponseBody{
		ID:          v.ID,
		Name:        v.Name,
		Description: v.Description,
		CreatedAt:   v.CreatedAt,
	}

	return res
}
