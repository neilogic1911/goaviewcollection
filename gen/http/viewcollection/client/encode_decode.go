// Code generated by goa v3.17.2, DO NOT EDIT.
//
// viewcollection HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/neilogic1911/goaviewcollection/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	viewcollection "github.com/neilogic1911/goaviewcollection/gen/viewcollection"
	viewcollectionviews "github.com/neilogic1911/goaviewcollection/gen/viewcollection/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildListElementRequest instantiates a HTTP request object with method and
// path set to call the "viewcollection" service "list_element" endpoint
func (c *Client) BuildListElementRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListElementViewcollectionPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("viewcollection", "list_element", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeListElementResponse returns a decoder for responses returned by the
// viewcollection list_element endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeListElementResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListElementResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("viewcollection", "list_element", err)
			}
			p := NewListElementElementResultCollectionOK(body)
			view := "tiny"
			vres := viewcollectionviews.ElementResultCollection{Projected: p, View: view}
			if err = viewcollectionviews.ValidateElementResultCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("viewcollection", "list_element", err)
			}
			res := viewcollection.NewElementResultCollection(vres)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("viewcollection", "list_element", resp.StatusCode, string(body))
		}
	}
}

// BuildListElementInAttributeRequest instantiates a HTTP request object with
// method and path set to call the "viewcollection" service
// "list_element_in_attribute" endpoint
func (c *Client) BuildListElementInAttributeRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListElementInAttributeViewcollectionPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("viewcollection", "list_element_in_attribute", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeListElementInAttributeResponse returns a decoder for responses
// returned by the viewcollection list_element_in_attribute endpoint.
// restoreBody controls whether the response body should be restored after
// having been read.
func DecodeListElementInAttributeResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListElementInAttributeResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("viewcollection", "list_element_in_attribute", err)
			}
			err = ValidateListElementInAttributeResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("viewcollection", "list_element_in_attribute", err)
			}
			res := NewListElementInAttributeResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("viewcollection", "list_element_in_attribute", resp.StatusCode, string(body))
		}
	}
}

// unmarshalElementResultResponseToViewcollectionviewsElementResultView builds
// a value of type *viewcollectionviews.ElementResultView from a value of type
// *ElementResultResponse.
func unmarshalElementResultResponseToViewcollectionviewsElementResultView(v *ElementResultResponse) *viewcollectionviews.ElementResultView {
	res := &viewcollectionviews.ElementResultView{
		ID:          v.ID,
		Name:        v.Name,
		Description: v.Description,
		CreatedAt:   v.CreatedAt,
	}

	return res
}

// unmarshalElementResultResponseBodyToViewcollectionElementResult builds a
// value of type *viewcollection.ElementResult from a value of type
// *ElementResultResponseBody.
func unmarshalElementResultResponseBodyToViewcollectionElementResult(v *ElementResultResponseBody) *viewcollection.ElementResult {
	if v == nil {
		return nil
	}
	res := &viewcollection.ElementResult{
		ID:          *v.ID,
		Name:        *v.Name,
		Description: *v.Description,
		CreatedAt:   *v.CreatedAt,
	}

	return res
}
