// Code generated by goa v3.17.2, DO NOT EDIT.
//
// viewcollection HTTP client types
//
// Command:
// $ goa gen github.com/neilogic1911/goaviewcollection/design

package client

import (
	viewcollection "github.com/neilogic1911/goaviewcollection/gen/viewcollection"
	viewcollectionviews "github.com/neilogic1911/goaviewcollection/gen/viewcollection/views"
	goa "goa.design/goa/v3/pkg"
)

// ListElementResponseBody is the type of the "viewcollection" service
// "list_element" endpoint HTTP response body.
type ListElementResponseBody []*ElementResultResponse

// ListElementInAttributeResponseBody is the type of the "viewcollection"
// service "list_element_in_attribute" endpoint HTTP response body.
type ListElementInAttributeResponseBody struct {
	Data ElementResultCollectionResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// ElementResultResponse is used to define fields on response body types.
type ElementResultResponse struct {
	// ID of the element
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of the element
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the element
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Creation time of the element
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
}

// ElementResultCollectionResponseBody is used to define fields on response
// body types.
type ElementResultCollectionResponseBody []*ElementResultResponseBody

// ElementResultResponseBody is used to define fields on response body types.
type ElementResultResponseBody struct {
	// ID of the element
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of the element
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the element
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Creation time of the element
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
}

// NewListElementElementResultCollectionOK builds a "viewcollection" service
// "list_element" endpoint result from a HTTP "OK" response.
func NewListElementElementResultCollectionOK(body ListElementResponseBody) viewcollectionviews.ElementResultCollectionView {
	v := make([]*viewcollectionviews.ElementResultView, len(body))
	for i, val := range body {
		v[i] = unmarshalElementResultResponseToViewcollectionviewsElementResultView(val)
	}

	return v
}

// NewListElementInAttributeResultOK builds a "viewcollection" service
// "list_element_in_attribute" endpoint result from a HTTP "OK" response.
func NewListElementInAttributeResultOK(body *ListElementInAttributeResponseBody) *viewcollection.ListElementInAttributeResult {
	v := &viewcollection.ListElementInAttributeResult{}
	if body.Data != nil {
		v.Data = make([]*viewcollection.ElementResult, len(body.Data))
		for i, val := range body.Data {
			v.Data[i] = unmarshalElementResultResponseBodyToViewcollectionElementResult(val)
		}
	}

	return v
}

// ValidateListElementInAttributeResponseBody runs the validations defined on
// list_element_in_attribute_response_body
func ValidateListElementInAttributeResponseBody(body *ListElementInAttributeResponseBody) (err error) {
	if body.Data != nil {
		if err2 := ValidateElementResultCollectionResponseBody(body.Data); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateElementResultResponse runs the validations defined on
// ElementResultResponse
func ValidateElementResultResponse(body *ElementResultResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	return
}

// ValidateElementResultCollectionResponseBody runs the validations defined on
// ElementResultCollectionResponseBody
func ValidateElementResultCollectionResponseBody(body ElementResultCollectionResponseBody) (err error) {
	for _, e := range body {
		if e != nil {
			if err2 := ValidateElementResultResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateElementResultResponseBody runs the validations defined on
// ElementResultResponseBody
func ValidateElementResultResponseBody(body *ElementResultResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	return
}
