// Code generated by goa v3.17.2, DO NOT EDIT.
//
// goaviewcollection HTTP client CLI support package
//
// Command:
// $ goa gen github.com/neilogic1911/goaviewcollection/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	viewcollectionc "github.com/neilogic1911/goaviewcollection/gen/http/viewcollection/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `viewcollection (list-element|list-element-in-attribute)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` viewcollection list-element` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		viewcollectionFlags = flag.NewFlagSet("viewcollection", flag.ContinueOnError)

		viewcollectionListElementFlags = flag.NewFlagSet("list-element", flag.ExitOnError)

		viewcollectionListElementInAttributeFlags = flag.NewFlagSet("list-element-in-attribute", flag.ExitOnError)
	)
	viewcollectionFlags.Usage = viewcollectionUsage
	viewcollectionListElementFlags.Usage = viewcollectionListElementUsage
	viewcollectionListElementInAttributeFlags.Usage = viewcollectionListElementInAttributeUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "viewcollection":
			svcf = viewcollectionFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "viewcollection":
			switch epn {
			case "list-element":
				epf = viewcollectionListElementFlags

			case "list-element-in-attribute":
				epf = viewcollectionListElementInAttributeFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "viewcollection":
			c := viewcollectionc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list-element":
				endpoint = c.ListElement()
			case "list-element-in-attribute":
				endpoint = c.ListElementInAttribute()
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// viewcollectionUsage displays the usage of the viewcollection command and its
// subcommands.
func viewcollectionUsage() {
	fmt.Fprintf(os.Stderr, `Service is the viewcollection service interface.
Usage:
    %[1]s [globalflags] viewcollection COMMAND [flags]

COMMAND:
    list-element: ListElement implements list_element.
    list-element-in-attribute: ListElementInAttribute implements list_element_in_attribute.

Additional help:
    %[1]s viewcollection COMMAND --help
`, os.Args[0])
}
func viewcollectionListElementUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] viewcollection list-element

ListElement implements list_element.

Example:
    %[1]s viewcollection list-element
`, os.Args[0])
}

func viewcollectionListElementInAttributeUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] viewcollection list-element-in-attribute

ListElementInAttribute implements list_element_in_attribute.

Example:
    %[1]s viewcollection list-element-in-attribute
`, os.Args[0])
}
