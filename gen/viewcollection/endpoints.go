// Code generated by goa v3.17.2, DO NOT EDIT.
//
// viewcollection endpoints
//
// Command:
// $ goa gen github.com/neilogic1911/goaviewcollection/design

package viewcollection

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "viewcollection" service endpoints.
type Endpoints struct {
	ListElement            goa.Endpoint
	ListElementInAttribute goa.Endpoint
}

// NewEndpoints wraps the methods of the "viewcollection" service with
// endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		ListElement:            NewListElementEndpoint(s),
		ListElementInAttribute: NewListElementInAttributeEndpoint(s),
	}
}

// Use applies the given middleware to all the "viewcollection" service
// endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.ListElement = m(e.ListElement)
	e.ListElementInAttribute = m(e.ListElementInAttribute)
}

// NewListElementEndpoint returns an endpoint function that calls the method
// "list_element" of service "viewcollection".
func NewListElementEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		res, err := s.ListElement(ctx)
		if err != nil {
			return nil, err
		}
		vres := NewViewedElementResultCollection(res, "tiny")
		return vres, nil
	}
}

// NewListElementInAttributeEndpoint returns an endpoint function that calls
// the method "list_element_in_attribute" of service "viewcollection".
func NewListElementInAttributeEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return s.ListElementInAttribute(ctx)
	}
}
