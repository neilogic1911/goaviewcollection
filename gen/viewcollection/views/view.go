// Code generated by goa v3.17.2, DO NOT EDIT.
//
// viewcollection views
//
// Command:
// $ goa gen github.com/neilogic1911/goaviewcollection/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// ElementResultCollection is the viewed result type that is projected based on
// a view.
type ElementResultCollection struct {
	// Type to project
	Projected ElementResultCollectionView
	// View to render
	View string
}

// ElementResultCollectionView is a type that runs validations on a projected
// type.
type ElementResultCollectionView []*ElementResultView

// ElementResultView is a type that runs validations on a projected type.
type ElementResultView struct {
	// ID of the element
	ID *int
	// Name of the element
	Name *string
	// Description of the element
	Description *string
	// Creation time of the element
	CreatedAt *string
}

var (
	// ElementResultCollectionMap is a map indexing the attribute names of
	// ElementResultCollection by view name.
	ElementResultCollectionMap = map[string][]string{
		"default": {
			"id",
			"name",
			"description",
			"created_at",
		},
		"tiny": {
			"id",
			"name",
		},
	}
	// ElementResultMap is a map indexing the attribute names of ElementResult by
	// view name.
	ElementResultMap = map[string][]string{
		"default": {
			"id",
			"name",
			"description",
			"created_at",
		},
		"tiny": {
			"id",
			"name",
		},
	}
)

// ValidateElementResultCollection runs the validations defined on the viewed
// result type ElementResultCollection.
func ValidateElementResultCollection(result ElementResultCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateElementResultCollectionView(result.Projected)
	case "tiny":
		err = ValidateElementResultCollectionViewTiny(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default", "tiny"})
	}
	return
}

// ValidateElementResultCollectionView runs the validations defined on
// ElementResultCollectionView using the "default" view.
func ValidateElementResultCollectionView(result ElementResultCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateElementResultView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateElementResultCollectionViewTiny runs the validations defined on
// ElementResultCollectionView using the "tiny" view.
func ValidateElementResultCollectionViewTiny(result ElementResultCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateElementResultViewTiny(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateElementResultView runs the validations defined on ElementResultView
// using the "default" view.
func ValidateElementResultView(result *ElementResultView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "result"))
	}
	if result.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "result"))
	}
	return
}

// ValidateElementResultViewTiny runs the validations defined on
// ElementResultView using the "tiny" view.
func ValidateElementResultViewTiny(result *ElementResultView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	return
}
