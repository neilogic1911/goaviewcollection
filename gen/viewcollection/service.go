// Code generated by goa v3.17.2, DO NOT EDIT.
//
// viewcollection service
//
// Command:
// $ goa gen github.com/neilogic1911/goaviewcollection/design

package viewcollection

import (
	"context"

	viewcollectionviews "github.com/neilogic1911/goaviewcollection/gen/viewcollection/views"
)

// Service is the viewcollection service interface.
type Service interface {
	// ListElement implements list_element.
	ListElement(context.Context) (res ElementResultCollection, err error)
	// ListElementInAttribute implements list_element_in_attribute.
	ListElementInAttribute(context.Context) (res *ListElementInAttributeResult, err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "goaviewcollection"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "viewcollection"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [2]string{"list_element", "list_element_in_attribute"}

type ElementResult struct {
	// ID of the element
	ID int
	// Name of the element
	Name string
	// Description of the element
	Description string
	// Creation time of the element
	CreatedAt string
}

// ElementResultCollection is the result type of the viewcollection service
// list_element method.
type ElementResultCollection []*ElementResult

// ListElementInAttributeResult is the result type of the viewcollection
// service list_element_in_attribute method.
type ListElementInAttributeResult struct {
	Data ElementResultCollection
}

// NewElementResultCollection initializes result type ElementResultCollection
// from viewed result type ElementResultCollection.
func NewElementResultCollection(vres viewcollectionviews.ElementResultCollection) ElementResultCollection {
	var res ElementResultCollection
	switch vres.View {
	case "default", "":
		res = newElementResultCollection(vres.Projected)
	case "tiny":
		res = newElementResultCollectionTiny(vres.Projected)
	}
	return res
}

// NewViewedElementResultCollection initializes viewed result type
// ElementResultCollection from result type ElementResultCollection using the
// given view.
func NewViewedElementResultCollection(res ElementResultCollection, view string) viewcollectionviews.ElementResultCollection {
	var vres viewcollectionviews.ElementResultCollection
	switch view {
	case "default", "":
		p := newElementResultCollectionView(res)
		vres = viewcollectionviews.ElementResultCollection{Projected: p, View: "default"}
	case "tiny":
		p := newElementResultCollectionViewTiny(res)
		vres = viewcollectionviews.ElementResultCollection{Projected: p, View: "tiny"}
	}
	return vres
}

// newElementResultCollection converts projected type ElementResultCollection
// to service type ElementResultCollection.
func newElementResultCollection(vres viewcollectionviews.ElementResultCollectionView) ElementResultCollection {
	res := make(ElementResultCollection, len(vres))
	for i, n := range vres {
		res[i] = newElementResult(n)
	}
	return res
}

// newElementResultCollectionTiny converts projected type
// ElementResultCollection to service type ElementResultCollection.
func newElementResultCollectionTiny(vres viewcollectionviews.ElementResultCollectionView) ElementResultCollection {
	res := make(ElementResultCollection, len(vres))
	for i, n := range vres {
		res[i] = newElementResultTiny(n)
	}
	return res
}

// newElementResultCollectionView projects result type ElementResultCollection
// to projected type ElementResultCollectionView using the "default" view.
func newElementResultCollectionView(res ElementResultCollection) viewcollectionviews.ElementResultCollectionView {
	vres := make(viewcollectionviews.ElementResultCollectionView, len(res))
	for i, n := range res {
		vres[i] = newElementResultView(n)
	}
	return vres
}

// newElementResultCollectionViewTiny projects result type
// ElementResultCollection to projected type ElementResultCollectionView using
// the "tiny" view.
func newElementResultCollectionViewTiny(res ElementResultCollection) viewcollectionviews.ElementResultCollectionView {
	vres := make(viewcollectionviews.ElementResultCollectionView, len(res))
	for i, n := range res {
		vres[i] = newElementResultViewTiny(n)
	}
	return vres
}

// newElementResult converts projected type ElementResult to service type
// ElementResult.
func newElementResult(vres *viewcollectionviews.ElementResultView) *ElementResult {
	res := &ElementResult{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Description != nil {
		res.Description = *vres.Description
	}
	if vres.CreatedAt != nil {
		res.CreatedAt = *vres.CreatedAt
	}
	return res
}

// newElementResultTiny converts projected type ElementResult to service type
// ElementResult.
func newElementResultTiny(vres *viewcollectionviews.ElementResultView) *ElementResult {
	res := &ElementResult{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	return res
}

// newElementResultView projects result type ElementResult to projected type
// ElementResultView using the "default" view.
func newElementResultView(res *ElementResult) *viewcollectionviews.ElementResultView {
	vres := &viewcollectionviews.ElementResultView{
		ID:          &res.ID,
		Name:        &res.Name,
		Description: &res.Description,
		CreatedAt:   &res.CreatedAt,
	}
	return vres
}

// newElementResultViewTiny projects result type ElementResult to projected
// type ElementResultView using the "tiny" view.
func newElementResultViewTiny(res *ElementResult) *viewcollectionviews.ElementResultView {
	vres := &viewcollectionviews.ElementResultView{
		ID:   &res.ID,
		Name: &res.Name,
	}
	return vres
}
